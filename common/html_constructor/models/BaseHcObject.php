<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\html_constructor\models;

use common\html_constructor\models\utility\FileData;
use Yii;

/**
 * This is the base-model class for table "hc_object".
 *
 * @property integer $id
 * @property string $table_name
 * @property integer $row_id
 *
 * @property common\html_constructor\models\HcObjectFile[] $hcObjectFile
 * @property common\html_constructor\models\HcObjectFileTarget[] $fileTargets
 * @property common\html_constructor\models\HcObjectSeo[] $hcObjectSeos
 * @property string $aliasModel
 */
abstract class BaseHcObject extends \yii\db\ActiveRecord
{

    private $fileEnumClass;

    public function __construct()
    {
        //в каждом модуле своя реализация FileEnum
        $this->fileEnumClass = BaseFileEnum::class;
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getHcObject()
    {
        return $this->hasOne(HcObject::class, ['row_id' => 'id'])->andOnCondition(['table_name' => $this->tableName()]);
    }

    /* *
     * @return \yii\db\ActiveQuery
     */
    public function getFileTargets()
    {
        return $this->hasMany(HcObjectFileTarget::class, ['hc_object_id' => 'id'])->via('hcObject');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSeoObject()
    {
        return $this->hasOne(HcObjectSeo::class, ['hc_object_id' => 'id'])->via('hcObject');
    }

    public static function createHcObjects() {
        foreach (self::findWithRelations()->all() as $obj) {
            $obj->createHcObject();
        }
    }

    public function createHcObject() {
        if (empty($this->hcObject)) {
            $newHcObject = new HcObject();
            $newHcObject->table_name = $this->tableName();
            $newHcObject->row_id = $this->id;
            if (!$newHcObject->save()) {
                $this->addError('newHcObject', 'Не удалось создать объект');
                return false;
            }
        }

        if (empty($this->seoObject) && $hcObject = $this->getHcObject()->one()) {
            $newSeoObject = new HcObjectSeo();
            $newSeoObject->hc_object_id = $hcObject->id;
            if (!$newSeoObject->save()) {
                $newHcObject->delete();
                $this->addError('newSeoObject', 'Не удалось создать объект');
                return false;
            }
        }
        $this->createFileTargets();
        $this->refresh();
    }

    public function afterSave($insert, $changed)
    {
        parent::afterSave($insert, $changed);
        $this->createHcObject();
    }

    public function beforeDelete()
    {
        if (!parent::beforeDelete()) {
            return false;
        }
        if ($this->hcObject) {
            return $this->hcObject->delete();
        }
        return true;
    }

    private function createFileTargets()
    {
        $existingFileTargets = array_map(
            function ($target) {
                return $target->type;
            },
            $this->fileTargets
        );
        foreach ($this->fileEnumClass::getForHcObject($this) as $type) {
            if (!in_array($type, $existingFileTargets)) {
                $newFileTarget = new HcObjectFileTarget([
                    'hc_object_id' => $this->getHcObject()->one()->id,
                    'type' => $type,
                    'index' => 1 //TODO more instances
                ]);
                if ($newFileTarget->save()) {
                };
            }
        }
    }

    public function getFileData($type, $config = [], $position = 0, $index = 1)
    {
        $fileData = new FileData();
        if (in_array($type, $this->fileEnumClass::getForHcObject($this))) {

            $filtered = array_filter($this->fileTargets, function ($hcFileTarget) use ($type, $index) {
                return $hcFileTarget->type == $type && $hcFileTarget->index == $index;
            });

            if (($hcFileTarget = reset($filtered)) && isset($hcFileTarget->hcObjectFile[$position])) {
                $fileData->setSrc($hcFileTarget->hcObjectFile[$position]->file->getWebFileLink($config));
                $fileData->setAlt($hcFileTarget->hcObjectFile[$position]->description);
            }
        }

        return $fileData;
    }

    public function getFilesData($type, $config = [], $index = 1)
    {
        $filesData = [];
        if (in_array($type, $this->fileEnumClass::getForHcObject($this))) {

            $filtered = array_filter($this->fileTargets, function ($hcFileTarget) use ($type, $index) {
                return $hcFileTarget->type == $type && $hcFileTarget->index == $index;
            });

            if (($hcFileTarget = reset($filtered)) && !empty($hcFileTarget->hcObjectFile)) {
                foreach ($hcFileTarget->hcObjectFile as $hcObjectFile) {
                    $src = $hcObjectFile->file->getWebFileLink($config);
                    $alt = $hcObjectFile->description;
                    $filesData[] = new FileData($src, $alt);
                }
            }
        }

        return $filesData;
    }

    public static function findWithFile()
    {
        return static::find()
            ->with('fileTargets')
            ->with('fileTargets.hcObjectFile')
            ->with('fileTargets.hcObjectFile.hcFile');
    }

    public static function findWithSeo()
    {
        return static::find()->with('seoObject');
    }

    public static function findWithRelations() {
        return static::find()
            ->with('fileTargets')
            ->with('fileTargets.hcObjectFile')
            ->with('fileTargets.hcObjectFile.hcFile')
            ->with('seoObject');
    }
}
